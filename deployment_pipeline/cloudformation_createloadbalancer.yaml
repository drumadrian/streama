AWSTemplateFormatVersion: 2010-09-09
Description: >
  Aurora serverless cluster 
  https://github.com/awslabs/aws-cloudformation-templates/tree/master/community/services/RDS/aurora-serverless


Parameters:

  # CIDRRangePrefix:
  #   Description: 'Provide a valid Class-B CIDR Block Range.'
  #   ConstraintDescription: 'Must provide the first two octets seperated by a period. ( Example: "10.250" )'
  #   Type: String
  #   AllowedPattern: '((\d{1,3})\.){1}\d{1,3}'
  #   MinLength: 3
  #   MaxLength: 7

  # HostedZoneName:
  #   Description: 'Provide a valid internal Domain Name for the crawler.'
  #   ConstraintDescription: 'Must provide valid internal Domain Name. ( Example: "pollywhitepapers.com" )'
  #   Type: String
  #   Default: private.adrianws.com

  # ProvisionNATgateways:
  #   Description: 'NAT Gateways are expensive for personal projects.  This is a feature to not create them'
  #   ConstraintDescription: 'true or false'
  #   Type: String
  #   Default: false


  VpcId:
    Type: AWS::EC2::VPC::Id
  # VpcSecurityGroupId:
  #   Type: AWS::EC2::SecurityGroup::Id
  DBSubnet1:
    Type: String
  DBSubnet2:
    Type: String
  # BastionImageId:
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #   Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs
  # BastionKeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: EC2 key used to connect to the bastion host


# Conditions: 
#   ProvisionNATgateways: !Equals [ !Ref ProvisionNATgateways, true ]


Resources:
  



  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      # LoadBalancerAttributes: 
      #   - LoadBalancerAttribute
      # Name: String
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      Tags: 
        - Key: StackName
        - Value: !Sub '${AWS::StackName}'
      Type: application





  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub 'LoadBalancerSecurityGroup for ${AWS::StackName}'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
          IpProtocol: '-1'
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: '-1'
      VpcId: !Ref VpcId



















  # Cluster:
  #   Type: AWS::RDS::DBCluster
  #   Properties:
  #     Engine: aurora
  #     DBSubnetGroupName: !Ref AuroraSubnetGroup
  #     EngineMode: serverless
  #     EngineVersion: !Ref EngineVersion
  #     DatabaseName: !Ref DatabaseName
  #     MasterUsername: !Ref MasterUsername
  #     MasterUserPassword: !Ref MasterUserPassword
  #     DBClusterIdentifier: !Ref AWS::StackName
  #     BackupRetentionPeriod: 35
  #     DeletionProtection: true
  #     VpcSecurityGroupIds:
  #       - !Ref VpcSecurityGroupId


  # AuroraSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties: 
  #     GroupDescription: !Sub 'Database SecurityGroup for ${AWS::StackName}'
  #     SecurityGroupEgress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: -1
  #         ToPort: -1
  #         IpProtocol: '-1'
  #       - DestinationSecurityGroupId: !Ref VpcSecurityGroupId
  #         IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #     SecurityGroupIngress: []
  #     VpcId: !Ref VpcId

  # AuroraSubnetGroup:
  #   Type: AWS::RDS::DBSubnetGroup
  #   Properties: 
  #     DBSubnetGroupDescription: !Sub 'Database SubnetGroup for ${AWS::StackName}'
  #     # DBSubnetGroupName: AuroraSubnetGroup
  #     SubnetIds: 
  #       - !Ref DBSubnet1
  #       - !Ref DBSubnet2
  #     Tags: 
  #       - Key: StackName
  #         Value: !Sub '${AWS::StackName}'



  # BastionSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties: 
  #     GroupDescription: !Sub 'Bastion for ${AWS::StackName}'
  #     SecurityGroupEgress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: -1
  #         ToPort: -1
  #         IpProtocol: '-1'
  #       - DestinationSecurityGroupId: !Ref VpcSecurityGroupId
  #         IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #     SecurityGroupIngress: []
  #     VpcId: !Ref VpcId

  # Bastion:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     DisableApiTermination: true
  #     ImageId: !Ref BastionImageId
  #     InstanceType: t2.nano
  #     KeyName: !Ref BastionKeyName
  #     Monitoring: false
  #     SecurityGroupIds:
  #       - !Ref VpcSecurityGroupId
  #       - !Ref BastionSecurityGroup
  #     UserData: !Base64 'yum install mysql --assumeyes'
















# Outputs:
#   Host:
#     Value: !GetAtt Cluster.Endpoint.Address
#     Export:
#       Name: !Sub '${AWS::StackName}Host'
#   Name:
#     Value: !Ref DatabaseName
#     Export:
#       Name: !Sub '${AWS::StackName}Name'
  # BastionHost:
  #   Value: !GetAtt Bastion.PublicDnsName
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionHost'
  # BastionIp:
  #   Value: !GetAtt Bastion.PublicIp
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionIp'
  # BastionSecurityGroupId:
  #   Value: !GetAtt BastionSecurityGroup.GroupId
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionSecurityGroupId'



