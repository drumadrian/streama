AWSTemplateFormatVersion: 2010-09-09
Description: >
  Aurora serverless cluster 
  https://github.com/awslabs/aws-cloudformation-templates/tree/master/community/services/RDS/aurora-serverless


Parameters:

  CIDRRangePrefix:
    Description: 'Provide a valid Class-B CIDR Block Range.'
    ConstraintDescription: 'Must provide the first two octets seperated by a period. ( Example: "10.250" )'
    Type: String
    AllowedPattern: '((\d{1,3})\.){1}\d{1,3}'
    MinLength: 3
    MaxLength: 7

  HostedZoneName:
    Description: 'Provide a valid internal Domain Name for the crawler.'
    ConstraintDescription: 'Must provide valid internal Domain Name. ( Example: "pollywhitepapers.com" )'
    Type: String
    Default: private.adrianws.com

  ProvisionNATgateways:
    Description: 'NAT Gateways are expensive for personal projects.  This is a feature to not create them'
    ConstraintDescription: 'true or false'
    Type: String
    Default: false


  DatabaseName:
    Type: String
  EngineVersion:
    Type: String
    Default: '5.6'
  MasterUsername:
    Type: String
    Default: root
  MasterUserPassword:
    Type: String
    NoEcho: true
  VpcId:
    Type: AWS::EC2::VPC::Id
  VpcSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  DBSubnet1:
    Type: String
  DBSubnet2:
    Type: String
  # BastionImageId:
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #   Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-ebs
  # BastionKeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: EC2 key used to connect to the bastion host


# Conditions: 
#   ProvisionNATgateways: !Equals [ !Ref ProvisionNATgateways, true ]




  PipelineName:
    Description: 'The stack that created the VPC'
    Type: String

  GitHTTPSURL:
    Description: 'The HTTPS clone URL of the code repository'
    Type: String

Resources:

  meetupelasticsearch:
    Type: 'AWS::Elasticsearch::Domain'
    Properties:
      # DomainName: !Sub "${PipelineName}-es"
      ElasticsearchVersion: '6.3'
      ElasticsearchClusterConfig:
        InstanceCount: '1'
        InstanceType: m4.xlarge.elasticsearch
        ZoneAwarenessEnabled: "false"
      EBSOptions:
        EBSEnabled: 'true'
        Iops: 0
        VolumeSize: 100
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      Tags:
        - Key: PipelineName
          Value: !Sub "${PipelineName}"
        - Key: stack
          Value: !Sub "${AWS::StackName}"
        - Key: Domain name too long to make real domain name
          Value: !Sub "${PipelineName}-elasticsearch"

      VPCOptions:
        SubnetIds:
          - Fn::ImportValue: !Sub "${PipelineName}-vpc-SubnetServerA"
        SecurityGroupIds:
          - !Ref meetupElasticSearchSecurityGroup



  meetupElasticSearchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: meetup ElasticSearch Security Group
      VpcId:
        Fn::ImportValue: !Sub "${PipelineName}-vpc-VPCID"
      Tags:
        - Key: Name
          Value: meetup ElasticSearch Security Group

  meetupElasticSearchSecurityGroupingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref meetupElasticSearchSecurityGroup
      FromPort : 80
      ToPort : 80
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  meetupElasticSearchSecurityGroupingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref meetupElasticSearchSecurityGroup
      FromPort : 443
      ToPort : 443
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  meetupElasticSearchSecurityGroupegress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref meetupElasticSearchSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0


  SSMparametermeetupelasticsearchDomain:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Description: The domain name of the shared Elasticsearch cluster 
      Name: !Sub "${PipelineName}-SSMElasticsearchDomain"
      Type: String
      Value: 
        Fn::GetAtt: [ meetupelasticsearch, DomainEndpoint ]


  elasticsearchDNSrecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: DNS name for my elasticsearch cluster.
      HostedZoneId: 
        Fn::ImportValue: 
          !Sub "${PipelineName}-vpc-PrivateZoneDNSHostedZoneID"
      Name: 
        !Join
          - '.'
          - - elasticsearch
            - Fn::ImportValue: !Sub "${PipelineName}-vpc-PrivateZoneDNSHostedZoneName"
      Type: CNAME
      TTL: '60'
      ResourceRecords:
      - !GetAtt meetupelasticsearch.DomainEndpoint


# Resources:
#   Cluster:
#     Type: AWS::RDS::DBCluster
#     Properties:
#       Engine: aurora
#       DBSubnetGroupName: !Ref AuroraSubnetGroup
#       EngineMode: serverless
#       EngineVersion: !Ref EngineVersion
#       DatabaseName: !Ref DatabaseName
#       MasterUsername: !Ref MasterUsername
#       MasterUserPassword: !Ref MasterUserPassword
#       DBClusterIdentifier: !Ref AWS::StackName
#       BackupRetentionPeriod: 35
#       DeletionProtection: true
#       VpcSecurityGroupIds:
#         - !Ref VpcSecurityGroupId


#   AuroraSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties: 
#       GroupDescription: !Sub 'Database SecurityGroup for ${AWS::StackName}'
#       SecurityGroupEgress:
#         - CidrIp: 0.0.0.0/0
#           FromPort: -1
#           ToPort: -1
#           IpProtocol: '-1'
#         - DestinationSecurityGroupId: !Ref VpcSecurityGroupId
#           IpProtocol: tcp
#           FromPort: 3306
#           ToPort: 3306
#       SecurityGroupIngress: []
#       VpcId: !Ref VpcId

#   AuroraSubnetGroup:
#     Type: AWS::RDS::DBSubnetGroup
#     Properties: 
#       DBSubnetGroupDescription: !Sub 'Database SubnetGroup for ${AWS::StackName}'
#       # DBSubnetGroupName: AuroraSubnetGroup
#       SubnetIds: 
#         - !Ref DBSubnet1
#         - !Ref DBSubnet2
#       Tags: 
#         - Key: StackName
#           Value: !Sub '${AWS::StackName}'

# ------------

  # BastionSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties: 
  #     GroupDescription: !Sub 'Bastion for ${AWS::StackName}'
  #     SecurityGroupEgress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: -1
  #         ToPort: -1
  #         IpProtocol: '-1'
  #       - DestinationSecurityGroupId: !Ref VpcSecurityGroupId
  #         IpProtocol: tcp
  #         FromPort: 3306
  #         ToPort: 3306
  #     SecurityGroupIngress: []
  #     VpcId: !Ref VpcId

  # Bastion:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     DisableApiTermination: true
  #     ImageId: !Ref BastionImageId
  #     InstanceType: t2.nano
  #     KeyName: !Ref BastionKeyName
  #     Monitoring: false
  #     SecurityGroupIds:
  #       - !Ref VpcSecurityGroupId
  #       - !Ref BastionSecurityGroup
  #     UserData: !Base64 'yum install mysql --assumeyes'



Outputs:


  meetupelasticsearchoutput:
    Description: Replication Subnet in Availability Zone A
    Value: !Ref meetupelasticsearch
    Export:
      Name: !Sub '${AWS::StackName}-meetupelasticsearch'


  # Host:
  #   Value: !GetAtt Cluster.Endpoint.Address
  #   Export:
  #     Name: !Sub '${AWS::StackName}Host'
  # Name:
  #   Value: !Ref DatabaseName
  #   Export:
  #     Name: !Sub '${AWS::StackName}Name'
  # BastionHost:
  #   Value: !GetAtt Bastion.PublicDnsName
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionHost'
  # BastionIp:
  #   Value: !GetAtt Bastion.PublicIp
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionIp'
  # BastionSecurityGroupId:
  #   Value: !GetAtt BastionSecurityGroup.GroupId
  #   Export:
  #     Name: !Sub '${AWS::StackName}BastionSecurityGroupId'



